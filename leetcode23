/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0)
            return null;
        return MSort(lists, 0, lists.length - 1);
    }
    public ListNode MSort(ListNode[] lists, int low, int high){
        if (low < high){
            int mid = (low + high)/2;
            ListNode Left = MSort(lists, low, mid);
            ListNode Right = MSort(lists, mid + 1, high);
            return mergeTwoLists(Left, Right);
        }
        return lists[low];
    }
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if (l1 == null)
            return l2;
        if (l2 == null)
            return l1;
        ListNode mergeHead;
        if (l1.val < l2.val){
            mergeHead = l1;
            mergeHead.next = mergeTwoLists(l1.next, l2);
        }
        else{
            mergeHead = l2;
            mergeHead.next = mergeTwoLists(l1, l2.next);
        }
        return mergeHead;
    }
}
